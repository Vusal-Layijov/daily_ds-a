import math
class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        print(prerequisites)
        preMap={i:[] for i in range(numCourses)}
        visit=set()
        for crs, pre in prerequisites:
            preMap[crs].append(pre)

        def dfs(crs):
            if crs in visit:
                return False
            if preMap[crs]==[]:
                return True
            visit.add(crs)
            for nei in preMap[crs]:
                if not dfs(nei):
                    return False
            visit.remove(crs)
            preMap[crs]=[]
            return True

        for crs in range(numCourses):
            if not dfs(crs):
                return False
        return True
            

class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        preMap={c:[] for c in range(numCourses)}
        visit=set()
        for crs,pre in prerequisites:
            preMap[crs].append(pre)
        res=[]
        cycle=set()

        def dfs(crs):
            if crs in cycle:
                return False
            if crs in visit:
                return True
            cycle.add(crs)
            for pre in preMap[crs]:
                if dfs(pre) ==False:
                    return False
            cycle.remove(crs)
            visit.add(crs)
            res.append(crs)
            return True
        for crs in range(numCourses):
            if dfs(crs) == False:
                return []
        return res 

def stockMax(prices):
    profit=0
    maxP=0
    for price in prices[::-1]:
        if price>maxP:
            maxP=price
        else:
            profit+=maxP-price
    return profit


def is_prime(n):
    if n % 2 == 0 and n > 2: 
        return False
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if n % i == 0:
            return False
    return True

    
# Complete the redJohn function below.
def redJohn(n):
    maxHorizontals = n // 4
    M = 0
    for i in range(maxHorizontals + 1):
        simplifiedN = n - (i * 3)        
        # Using formula "simplifiedN CHOOSE i"
        M += int(math.factorial(simplifiedN) / (math.factorial(i) * math.factorial(simplifiedN - i)))
        
    ans = 0
    for i in range(M + 1):
        if i > 1 and is_prime(i):
            ans += 1
    return ans

class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        par=[i for i  in range(len(edges)+1)]
        rank=[1]*(len(edges)+1)
        def find(n):
            p=par[n]
            while p!=par[p]:
                par[p]=par[par[p]]
                p=par[p]
            return p
        def union(n1,n2):
            p1,p2=find(n1),find(n2)
            if p1==p2:
                return False
            if rank[p1]>rank[p2]:
                rank[p1]+=rank[p2]
                par[p2]=p1
            else:
                par[p1]=p2
                rank[p2]+=rank[p1]
            return True
        for n1,n2 in edges:
            if not union(n1,n2):
                return [n1,n2]
def funnyString(s):
    # Write your code here
    r=s[::-1]
    print(s,r)
    res=[]
    for ind in range(len(s)):
        res.append(abs(ord(s[ind]) - ord(r[ind])))
    
    return "Funny" if len(set(res))==1 else 'Not Funny'

def flatlandSpaceStations(n, c):
    if n == len(c): return 0
    if 1 == len(c): return max(c[0], n-1-c[0])
    
    c = sorted(c)
    
    if c[0] == 0:
        maxDist = 0
    else:
        maxDist = c[0]*2

    if c[-1] != n-1:
        maxDist = max(maxDist, ((n-1)-c[-1])*2)
    last = 0
    for i in c:
        maxDist = max((i-last), maxDist)
        last = i

    return maxDist//2

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        dp=[[0 for j in range(len(text2)+1)] for i in range(len(text1)+1)]

        for i in range(len(text1)-1,-1,-1):
            for j in range(len(text2)-1,-1,-1):
                if text1[i]==text2[j]:
                    dp[i][j]=1+dp[i+1][j+1]
                else:
                    dp[i][j]=max(dp[i][j+1],dp[i+1][j])
        return dp[0][0]
        
    
def hackerrankInString(s):
    # Write your code here
    myList=list(s)
    myList.append(0)
    for l in 'hackerrank':
        if l in myList:
            ind=myList.index(l)
            myList=myList[ind+1:]
        else:
            return 'NO'
    return 'YES'

class Solution:
    def divisorGame(self, n: int) -> bool:
        forMod=1
        first=False
        while n>1:
            for x in range(1,n):
                if n%x==0:
                    n=n-x
                    break
            first = not first
        return first
    
def maxSubarray(arr):
    # Maximum subsequence sum
    maxsq = max(arr)  # In case all numbers are negative, pick the largest
    if maxsq > 0:  # If there are positive numbers, sum them
        maxsq = sum(num for num in arr if num > 0)
    else:
        # All numbers are negative, so we don't need to sum; maxsq is already the maximum number
        pass
    
    # Maximum subarray sum using Kadane's Algorithm
    max_ending_here = max_so_far = arr[0]
    for num in arr[1:]:
        # max_ending_here keeps track of the sum of the subarray ending at the current position
        # It is either the current number itself or the current number plus the previous max_ending_here, whichever is larger
        max_ending_here = max(num, max_ending_here + num)
        # max_so_far keeps track of the largest sum we have seen so far
        max_so_far = max(max_so_far, max_ending_here)
    
    return (max_so_far, maxsq)
