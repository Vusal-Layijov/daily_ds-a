import math
class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        print(prerequisites)
        preMap={i:[] for i in range(numCourses)}
        visit=set()
        for crs, pre in prerequisites:
            preMap[crs].append(pre)

        def dfs(crs):
            if crs in visit:
                return False
            if preMap[crs]==[]:
                return True
            visit.add(crs)
            for nei in preMap[crs]:
                if not dfs(nei):
                    return False
            visit.remove(crs)
            preMap[crs]=[]
            return True

        for crs in range(numCourses):
            if not dfs(crs):
                return False
        return True
            

class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        preMap={c:[] for c in range(numCourses)}
        visit=set()
        for crs,pre in prerequisites:
            preMap[crs].append(pre)
        res=[]
        cycle=set()

        def dfs(crs):
            if crs in cycle:
                return False
            if crs in visit:
                return True
            cycle.add(crs)
            for pre in preMap[crs]:
                if dfs(pre) ==False:
                    return False
            cycle.remove(crs)
            visit.add(crs)
            res.append(crs)
            return True
        for crs in range(numCourses):
            if dfs(crs) == False:
                return []
        return res 

def stockMax(prices):
    profit=0
    maxP=0
    for price in prices[::-1]:
        if price>maxP:
            maxP=price
        else:
            profit+=maxP-price
    return profit


def is_prime(n):
    if n % 2 == 0 and n > 2: 
        return False
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if n % i == 0:
            return False
    return True

    
# Complete the redJohn function below.
def redJohn(n):
    maxHorizontals = n // 4
    M = 0
    for i in range(maxHorizontals + 1):
        simplifiedN = n - (i * 3)        
        # Using formula "simplifiedN CHOOSE i"
        M += int(math.factorial(simplifiedN) / (math.factorial(i) * math.factorial(simplifiedN - i)))
        
    ans = 0
    for i in range(M + 1):
        if i > 1 and is_prime(i):
            ans += 1
    return ans

class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        par=[i for i  in range(len(edges)+1)]
        rank=[1]*(len(edges)+1)
        def find(n):
            p=par[n]
            while p!=par[p]:
                par[p]=par[par[p]]
                p=par[p]
            return p
        def union(n1,n2):
            p1,p2=find(n1),find(n2)
            if p1==p2:
                return False
            if rank[p1]>rank[p2]:
                rank[p1]+=rank[p2]
                par[p2]=p1
            else:
                par[p1]=p2
                rank[p2]+=rank[p1]
            return True
        for n1,n2 in edges:
            if not union(n1,n2):
                return [n1,n2]